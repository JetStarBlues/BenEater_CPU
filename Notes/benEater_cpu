Block diagram (control signals)

  See https://youtu.be/FCscQGBIL-Y?t=5m25s



                                ||            --------
                                ||   loNib   |        | <- CO
                                || <-------> |   PC   | <- J
                                ||           |        | <- CE
                                ||            --------
                                ||
                                ||
                                ||
            --------            ||            --------
     MI -> |        |   loNib   ||           |        | <- AI
           |  MAR   | <-------- || <-------> |   A    | <- AO
           |        |           ||           |        |
            --------            ||            --------
               |                ||               |
               | loNib          ||               |
               v                ||               v
            --------            ||            --------
     RI -> |        |           ||           |        | <- ΣO
     R0 -> |  RAM   | <-------> || <-------> |  ALU   | <- SU
           |        |           ||           |        | -> FC
            --------            ||            --------  -> FZ
                                ||               ^
                                ||               |
                                ||               |
            --------            ||            --------
     II -> |        | <-------- ||           |        | <- BI
     IO -> |   IR   |           || --------> |   B    | // <- BO
           |        | --------> ||           |        |
            --------    loNib   ||            --------
               |                ||
               | hiNib          ||
               v                ||
          INSTR DECODER         ||            --------
                                ||           |        | <- OI
                                || --------> |  OUT   |
                                ||           |        |
            --------            ||            --------
     FI -> |        |           ||                |
     FZ -> |   FR   |           ||                |
     FC -> |        |           ||                v
            --------            ||             DISPLAY
                |               ||
                |               ||
                v               ||
              FLAGS             ||
                                ||


Program examples

	OUT = M[15] + M[14] - M[13]

	    assembly
	            
	    LDA 15  
	    ADD 14  
	    SUB 13  
	    OUT     
	    HLT     

	    binary
	    instr#  immediate
	    
	    0001    1111
	    0010    1110
	    0011    1101
	    1110    0000
	    1111    0000


	OUT = multiples of 3

		LDI 3
		STA 15  // M[15] = 3
		LDI 0   // A = 0
		ADD 15  // A += M[15]
		OUT
		JMP 3   // loop indefinitely


Command description

	8 bit instruction code -> upper four bits correspond to instruction type
	                       -> lower four bits correspond to immediate/address


	NOP       :  do nothing
	LDA addr  :  A = memory[ addr ]
	STA addr  :  memory[ addr ] = A
	LDI immed :  A = immed
	ADD addr  :  B = memory[ addr ]; A += B
	SUB addr  :  B = memory[ addr ]; A -= B
	JMP addr  :  PC = addr
	JC  addr  :  PC = addr if carry flag set
	JZ  addr  :  PC = addr if zero flag set
	...
	OUT       :  output = contents of A
	HLT       :  halt

Registers
	
	- A
	- B
	- instruction
	- output
	- memory_address
	- flags
		. carry, zero


Step
	https://youtu.be/dHWFpkGsxOs?t=29m
	
	Lasts one clock cycle

	(Versus PC which is incremented after fetch... so its interval duration is
	 variable at clock cycle duration * nSteps in instruction)

CPU control signals

	Who's putting / getting what from data bus ?
	
	HLT - halt
	MI  - memory_address_reg in
	RI  - memory(RAM) in
	R0  - memory(RAM) out
	IO  - instruction_reg out
	II  - instruction_reg in
	AI  - A_reg in
	AO  - A_reg out

	ΣO - ALU out -> A_reg op B_reg out  ??
	SU - If set, ALU subtracts. Else, ALU adds
	BI - B_reg in
	OI - output_reg in  // display
	CE - program_counter enable -> increment counter
	CO - program_counter out
	J  - jump
	FI - flags_reg in


Instructions
	                         Flags
	Name     Opcode   Step   ZC     HLT MI RI RO IO II AI AO    ΣO SU BI OI CE CO J  FI

	Fetch    xxxx     000    ..     0   1  0  0  0  0  0  0     0  0  0  0  0  1  0  0
	         xxxx     001    ..     0   0  0  1  0  1  0  0     0  0  0  0  1  0  0  0

	LDA      0001     010    ..     0   1  0  0  1  0  0  0     0  0  0  0  0  0  0  0
	         0001     011    ..     0   0  0  1  0  0  1  0     0  0  0  0  0  0  0  0
	         0001     100    ..     0   0  0  0  0  0  0  0     0  0  0  0  0  0  0  0

	ADD      0010     010    ..     0   1  0  0  1  0  0  0     0  0  0  0  0  0  0  0
	         0010     011    ..     0   0  0  1  0  0  0  0     0  0  1  0  0  0  0  0
	         0010     100    ..     0   0  0  0  0  0  1  0     1  0  0  0  0  0  0  0

	OUT      1110     010    ..     0   0  0  0  0  0  0  1     0  0  0  1  0  0  0  0
	         1110     011    ..     0   0  0  0  0  0  0  0     0  0  0  0  0  0  0  0
	         1110     100    ..     0   0  0  0  0  0  0  0     0  0  0  0  0  0  0  0

	HLT      1111     010    ..     1   0  0  0  0  0  0  0     0  0  0  0  0  0  0  0
	         1111     011    ..     0   0  0  0  0  0  0  0     0  0  0  0  0  0  0  0
	         1111     100    ..     0   0  0  0  0  0  0  0     0  0  0  0  0  0  0  0

	Smthn    xxxx     010    ..     0   0  0  0  0  0  0  0     0  0  0  0  0  0  0  0
	         xxxx     011    ..     0   0  0  0  0  0  0  0     0  0  0  0  0  0  0  0


Microcode

	Each instruction can have up to 8 steps

	Stored in EEPROM  ( 8bytes x 16 x 4 )

	Address is composite
		   9 = controlWord (upper 0, lower 1)  // I flipped order from official. This seems more logical
		8..7 = alu flags ( ZC )                // ditto
		6..3 = instruction opcode
		2..0 = microInstruction step

		ex. HLT      -> 00 1111 -> 15
		    HLT & C  -> 01 1111 -> 31
		    HLT & Z  -> 10 1111 -> 47
		    HLT & ZC -> 11 1111 -> 63


	Name    Opcode  byte1         byte2         byte3         byte4         byte5         byte6         byte7         byte8
  
	NOP     0       CO|MI         RO|II|CE      x             x             x             x             x             x
	LDA     1       CO|MI         RO|II|CE      IO|MI         RO|AI         0             0             0             0
	STA     2       CO|MI         RO|II|CE      IO|MI         AO|RI         0             0             0             0
	LDI     3       CO|MI         RO|II|CE      IO|AI         0             0             0             0             0
	ADD     4       CO|MI         RO|II|CE      IO|MI         RO|BI         ΣO|AI|FI      0             0             0
	SUB     5       CO|MI         RO|II|CE      IO|MI         RO|BI         ΣO|AI|SU|FI   0             0             0
	JMP     6       CO|MI         RO|II|CE      IO|J          0             0             0             0             0
	*JC     7       CO|MI         RO|II|CE      0             0             0             0             0             0
	*JZ     8       CO|MI         RO|II|CE      0             0             0             0             0             0
	xxx     9       CO|MI         RO|II|CE      0             0             0             0             0             0
	xxx     10      CO|MI         RO|II|CE      0             0             0             0             0             0
	xxx     11      CO|MI         RO|II|CE      0             0             0             0             0             0
	**ADI   12      CO|MI         RO|II|CE      IO|BI         ΣO|AI|FI      0             0             0             0
	**SBI   13      CO|MI         RO|II|CE      IO|BI         ΣO|AI|SU|FI   0             0             0             0
	OUT     14      CO|MI         RO|II|CE      AO|OI         0             0             0             0             0
	HLT     15      CO|MI         RO|II|CE      HLT           0             0             0             0             0


	* Vary depending on flag status

	  Flags_z0c0 ->  Z = 0, C = 0  correspond to instruction   0..15
	  Flags_z0c1 ->  Z = 0, C = 1  correspond to instruction  16..31
	  Flags_z1c0 ->  Z = 1, C = 0  correspond to instruction  32..47
	  Flags_z1c1 ->  Z = 1, C = 1  correspond to instruction  48..63

	-- Flags_z0c1 --
	 JC     23    CO|MI         RO|II|CE      IO|J          0             0             0             0             0

	-- Flags_z1c0 --
	 JZ     40    CO|MI         RO|II|CE      IO|J          0             0             0             0             0

	-- Flags_z1c1 --
	 JC     55    CO|MI         RO|II|CE      IO|J          0             0             0             0             0
	 JZ     56    CO|MI         RO|II|CE      IO|J          0             0             0             0             0


	** unofficial instructions

	TODO... check final instruction order he uses... whether reorders to logical? Otherwise might not be binary compatible


